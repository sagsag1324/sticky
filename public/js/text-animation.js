/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/text-animation.js":
/*!****************************************!*\
  !*** ./resources/js/text-animation.js ***!
  \****************************************/
/***/ (function() {

eval("(function () {\n  var $animate, $container, $message, $paragraph, MESSAGES, animate, initialise, scramble;\n  MESSAGES = [];\n  MESSAGES.push({\n    delay: 0,\n    text: \"Incoming transmission...\"\n  });\n  MESSAGES.push({\n    delay: 1200,\n    text: \"You don't talk to anybody.\"\n  });\n  MESSAGES.push({\n    delay: 2200,\n    text: \"You don't interact with anybody.\"\n  });\n  MESSAGES.push({\n    delay: 3600,\n    text: \"Your whole sense of reality is, pretty warped...\"\n  });\n  MESSAGES.push({\n    delay: 5200,\n    text: \"Does it bother you that we're not real?\"\n  });\n  $container = $(\"#container\");\n  $message = $(\"#message\");\n  $animate = $(\"#animate\");\n  $paragraph = null;\n  scramble = function scramble(element, text, options) {\n    var $element, addGlitch, character, defaults, ghostCharacter, ghostCharacters, ghostLength, ghostText, ghosts, glitchCharacter, glitchCharacters, glitchIndex, glitchLength, glitchProbability, glitchText, glitches, i, j, k, letter, object, order, output, parameters, ref, results, settings, shuffle, target, textCharacters, textLength, wrap;\n    defaults = {\n      probability: 0.2,\n      glitches: '-|/\\\\',\n      blank: '',\n      duration: text.length * 40,\n      ease: 'easeInOutQuad',\n      delay: 0.0\n    };\n    $element = $(element);\n    settings = $.extend(defaults, options);\n    shuffle = function shuffle() {\n      if (Math.random() < 0.5) {\n        return 1;\n      } else {\n        return -1;\n      }\n    };\n    wrap = function wrap(text, classes) {\n      return \"<span class=\\\"\" + classes + \"\\\">\" + text + \"</span>\";\n    };\n    glitchText = settings.glitches;\n    glitchCharacters = glitchText.split('');\n    glitchLength = glitchCharacters.length;\n    glitchProbability = settings.probability;\n    glitches = function () {\n      var j, len, results;\n      results = [];\n      for (j = 0, len = glitchCharacters.length; j < len; j++) {\n        letter = glitchCharacters[j];\n        results.push(wrap(letter, 'glitch'));\n      }\n      return results;\n    }();\n    ghostText = $element.text();\n    ghostCharacters = ghostText.split('');\n    ghostLength = ghostCharacters.length;\n    ghosts = function () {\n      var j, len, results;\n      results = [];\n      for (j = 0, len = ghostCharacters.length; j < len; j++) {\n        letter = ghostCharacters[j];\n        results.push(wrap(letter, 'ghost'));\n      }\n      return results;\n    }();\n    textCharacters = text.split('');\n    textLength = textCharacters.length;\n    order = function () {\n      results = [];\n      for (var j = 0; 0 <= textLength ? j < textLength : j > textLength; 0 <= textLength ? j++ : j--) {\n        results.push(j);\n      }\n      return results;\n    }.apply(this).sort(this.shuffle);\n    output = [];\n    for (i = k = 0, ref = textLength; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n      glitchIndex = Math.floor(Math.random() * (glitchLength - 1));\n      glitchCharacter = glitches[glitchIndex];\n      ghostCharacter = ghosts[i] || settings.blank;\n      addGlitch = Math.random() < glitchProbability;\n      character = addGlitch ? glitchCharacter : ghostCharacter;\n      output.push(character);\n    }\n    object = {\n      value: 0\n    };\n    target = {\n      value: 1\n    };\n    parameters = {\n      duration: settings.duration,\n      ease: settings.ease,\n      step: function step() {\n        var index, l, progress, ref1;\n        progress = Math.floor(object.value * (textLength - 1));\n        for (i = l = 0, ref1 = progress; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {\n          index = order[i];\n          output[index] = textCharacters[index];\n        }\n        return $element.html(output.join(''));\n      },\n      complete: function complete() {\n        return $element.html(text);\n      }\n    };\n    return $(object).delay(settings.delay).animate(target, parameters);\n  };\n  animate = function animate() {\n    var data, element, index, j, len, options;\n    for (index = j = 0, len = MESSAGES.length; j < len; index = ++j) {\n      data = MESSAGES[index];\n      element = $paragraph.get(index);\n      if (element) {\n        element.innerText = '';\n        options = {\n          delay: data.delay\n        };\n        scramble(element, data.text, options);\n      }\n    }\n  };\n  initialise = function initialise() {\n    var index, j, len, text;\n    $animate.click(animate);\n    for (index = j = 0, len = MESSAGES.length; j < len; index = ++j) {\n      text = MESSAGES[index];\n      $message.append(\"<p>\");\n    }\n    $paragraph = $container.find(\"p\");\n    animate();\n  };\n  // $(\"#our-art-btn\").on('click', () => {\n  //         console.log('sdfsdf')\n  // });\n\n  // ourArtBtn.addEventListener('click', e => {\n  // })\n  initialise();\n}).call(this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/js/text-animation.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/text-animation.js"]();
/******/ 	
/******/ })()
;