/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/text-animation.js":
/*!****************************************!*\
  !*** ./resources/js/text-animation.js ***!
  \****************************************/
/***/ (function() {

eval("(function () {\n  var $animate, $container, $message, $paragraph, MESSAGES, animate, initialise, scramble;\n  MESSAGES = [];\n  MESSAGES.push({\n    delay: 0,\n    text: \"Incoming transmission...\"\n  });\n  MESSAGES.push({\n    delay: 1200,\n    text: \"You don't talk to anybody.\"\n  });\n  MESSAGES.push({\n    delay: 2200,\n    text: \"You don't interact with anybody.\"\n  });\n  MESSAGES.push({\n    delay: 3600,\n    text: \"Your whole sense of reality is, pretty warped...\"\n  });\n  MESSAGES.push({\n    delay: 5200,\n    text: \"Does it bother you that we're not real?\"\n  });\n  $container = $(\"#container\");\n  $message = $(\"#message\");\n  $animate = $(\"#animate\");\n  $paragraph = null;\n  scramble = function scramble(element, text, options) {\n    var $element, addGlitch, character, defaults, ghostCharacter, ghostCharacters, ghostLength, ghostText, ghosts, glitchCharacter, glitchCharacters, glitchIndex, glitchLength, glitchProbability, glitchText, glitches, i, j, k, letter, object, order, output, parameters, ref, results, settings, shuffle, target, textCharacters, textLength, wrap;\n    defaults = {\n      probability: 0.2,\n      glitches: '-|/\\\\',\n      blank: '',\n      duration: text.length * 40,\n      ease: 'easeInOutQuad',\n      delay: 0.0\n    };\n    $element = $(element);\n    settings = $.extend(defaults, options);\n    shuffle = function shuffle() {\n      if (Math.random() < 0.5) {\n        return 1;\n      } else {\n        return -1;\n      }\n    };\n    wrap = function wrap(text, classes) {\n      return \"<span class=\\\"\" + classes + \"\\\">\" + text + \"</span>\";\n    };\n    glitchText = settings.glitches;\n    glitchCharacters = glitchText.split('');\n    glitchLength = glitchCharacters.length;\n    glitchProbability = settings.probability;\n    glitches = function () {\n      var j, len, results;\n      results = [];\n      for (j = 0, len = glitchCharacters.length; j < len; j++) {\n        letter = glitchCharacters[j];\n        results.push(wrap(letter, 'glitch'));\n      }\n      return results;\n    }();\n    ghostText = $element.text();\n    ghostCharacters = ghostText.split('');\n    ghostLength = ghostCharacters.length;\n    ghosts = function () {\n      var j, len, results;\n      results = [];\n      for (j = 0, len = ghostCharacters.length; j < len; j++) {\n        letter = ghostCharacters[j];\n        results.push(wrap(letter, 'ghost'));\n      }\n      return results;\n    }();\n    textCharacters = text.split('');\n    textLength = textCharacters.length;\n    order = function () {\n      results = [];\n      for (var j = 0; 0 <= textLength ? j < textLength : j > textLength; 0 <= textLength ? j++ : j--) {\n        results.push(j);\n      }\n      return results;\n    }.apply(this).sort(this.shuffle);\n    output = [];\n    for (i = k = 0, ref = textLength; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {\n      glitchIndex = Math.floor(Math.random() * (glitchLength - 1));\n      glitchCharacter = glitches[glitchIndex];\n      ghostCharacter = ghosts[i] || settings.blank;\n      addGlitch = Math.random() < glitchProbability;\n      character = addGlitch ? glitchCharacter : ghostCharacter;\n      output.push(character);\n    }\n    object = {\n      value: 0\n    };\n    target = {\n      value: 1\n    };\n    parameters = {\n      duration: settings.duration,\n      ease: settings.ease,\n      step: function step() {\n        var index, l, progress, ref1;\n        progress = Math.floor(object.value * (textLength - 1));\n        for (i = l = 0, ref1 = progress; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {\n          index = order[i];\n          output[index] = textCharacters[index];\n        }\n        return $element.html(output.join(''));\n      },\n      complete: function complete() {\n        return $element.html(text);\n      }\n    };\n    return $(object).delay(settings.delay).animate(target, parameters);\n  };\n  animate = function animate() {\n    var data, element, index, j, len, options;\n    for (index = j = 0, len = MESSAGES.length; j < len; index = ++j) {\n      data = MESSAGES[index];\n      element = $paragraph.get(index);\n      if (element) {\n        element.innerText = '';\n        options = {\n          delay: data.delay\n        };\n        scramble(element, data.text, options);\n      }\n    }\n  };\n  initialise = function initialise() {\n    var index, j, len, text;\n    $animate.click(animate);\n    for (index = j = 0, len = MESSAGES.length; j < len; index = ++j) {\n      text = MESSAGES[index];\n      $message.append(\"<p>\");\n    }\n    $paragraph = $container.find(\"p\");\n    animate();\n  };\n  // $(\"#our-art-btn\").on('click', () => {\n  //         console.log('sdfsdf')\n  // });\n\n  // ourArtBtn.addEventListener('click', e => {\n  // })\n  initialise();\n}).call(this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyIkYW5pbWF0ZSIsIiRjb250YWluZXIiLCIkbWVzc2FnZSIsIiRwYXJhZ3JhcGgiLCJNRVNTQUdFUyIsImFuaW1hdGUiLCJpbml0aWFsaXNlIiwic2NyYW1ibGUiLCJwdXNoIiwiZGVsYXkiLCJ0ZXh0IiwiJCIsImVsZW1lbnQiLCJvcHRpb25zIiwiJGVsZW1lbnQiLCJhZGRHbGl0Y2giLCJjaGFyYWN0ZXIiLCJkZWZhdWx0cyIsImdob3N0Q2hhcmFjdGVyIiwiZ2hvc3RDaGFyYWN0ZXJzIiwiZ2hvc3RMZW5ndGgiLCJnaG9zdFRleHQiLCJnaG9zdHMiLCJnbGl0Y2hDaGFyYWN0ZXIiLCJnbGl0Y2hDaGFyYWN0ZXJzIiwiZ2xpdGNoSW5kZXgiLCJnbGl0Y2hMZW5ndGgiLCJnbGl0Y2hQcm9iYWJpbGl0eSIsImdsaXRjaFRleHQiLCJnbGl0Y2hlcyIsImkiLCJqIiwiayIsImxldHRlciIsIm9iamVjdCIsIm9yZGVyIiwib3V0cHV0IiwicGFyYW1ldGVycyIsInJlZiIsInJlc3VsdHMiLCJzZXR0aW5ncyIsInNodWZmbGUiLCJ0YXJnZXQiLCJ0ZXh0Q2hhcmFjdGVycyIsInRleHRMZW5ndGgiLCJ3cmFwIiwicHJvYmFiaWxpdHkiLCJibGFuayIsImR1cmF0aW9uIiwibGVuZ3RoIiwiZWFzZSIsImV4dGVuZCIsIk1hdGgiLCJyYW5kb20iLCJjbGFzc2VzIiwic3BsaXQiLCJsZW4iLCJhcHBseSIsInNvcnQiLCJmbG9vciIsInZhbHVlIiwic3RlcCIsImluZGV4IiwibCIsInByb2dyZXNzIiwicmVmMSIsImh0bWwiLCJqb2luIiwiY29tcGxldGUiLCJkYXRhIiwiZ2V0IiwiaW5uZXJUZXh0IiwiY2xpY2siLCJhcHBlbmQiLCJmaW5kIiwiY2FsbCJdLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvdGV4dC1hbmltYXRpb24uanM/M2NlNyJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKSB7XG4gICAgdmFyICRhbmltYXRlLCAkY29udGFpbmVyLCAkbWVzc2FnZSwgJHBhcmFncmFwaCwgTUVTU0FHRVMsIGFuaW1hdGUsIGluaXRpYWxpc2UsIHNjcmFtYmxlO1xuICBcbiAgICBNRVNTQUdFUyA9IFtdO1xuICBcbiAgICBNRVNTQUdFUy5wdXNoKHtcbiAgICAgIGRlbGF5OiAwLFxuICAgICAgdGV4dDogXCJJbmNvbWluZyB0cmFuc21pc3Npb24uLi5cIlxuICAgIH0pO1xuICBcbiAgICBNRVNTQUdFUy5wdXNoKHtcbiAgICAgIGRlbGF5OiAxMjAwLFxuICAgICAgdGV4dDogXCJZb3UgZG9uJ3QgdGFsayB0byBhbnlib2R5LlwiXG4gICAgfSk7XG4gIFxuICAgIE1FU1NBR0VTLnB1c2goe1xuICAgICAgZGVsYXk6IDIyMDAsXG4gICAgICB0ZXh0OiBcIllvdSBkb24ndCBpbnRlcmFjdCB3aXRoIGFueWJvZHkuXCJcbiAgICB9KTtcbiAgXG4gICAgTUVTU0FHRVMucHVzaCh7XG4gICAgICBkZWxheTogMzYwMCxcbiAgICAgIHRleHQ6IFwiWW91ciB3aG9sZSBzZW5zZSBvZiByZWFsaXR5IGlzLCBwcmV0dHkgd2FycGVkLi4uXCJcbiAgICB9KTtcbiAgXG4gICAgTUVTU0FHRVMucHVzaCh7XG4gICAgICBkZWxheTogNTIwMCxcbiAgICAgIHRleHQ6IFwiRG9lcyBpdCBib3RoZXIgeW91IHRoYXQgd2UncmUgbm90IHJlYWw/XCJcbiAgICB9KTtcbiAgXG4gICAgJGNvbnRhaW5lciA9ICQoXCIjY29udGFpbmVyXCIpO1xuICBcbiAgICAkbWVzc2FnZSA9ICQoXCIjbWVzc2FnZVwiKTtcbiAgXG4gICAgJGFuaW1hdGUgPSAkKFwiI2FuaW1hdGVcIik7XG4gIFxuICAgICRwYXJhZ3JhcGggPSBudWxsO1xuICBcbiAgICBzY3JhbWJsZSA9IGZ1bmN0aW9uKGVsZW1lbnQsIHRleHQsIG9wdGlvbnMpIHtcbiAgICAgIHZhciAkZWxlbWVudCwgYWRkR2xpdGNoLCBjaGFyYWN0ZXIsIGRlZmF1bHRzLCBnaG9zdENoYXJhY3RlciwgZ2hvc3RDaGFyYWN0ZXJzLCBnaG9zdExlbmd0aCwgZ2hvc3RUZXh0LCBnaG9zdHMsIGdsaXRjaENoYXJhY3RlciwgZ2xpdGNoQ2hhcmFjdGVycywgZ2xpdGNoSW5kZXgsIGdsaXRjaExlbmd0aCwgZ2xpdGNoUHJvYmFiaWxpdHksIGdsaXRjaFRleHQsIGdsaXRjaGVzLCBpLCBqLCBrLCBsZXR0ZXIsIG9iamVjdCwgb3JkZXIsIG91dHB1dCwgcGFyYW1ldGVycywgcmVmLCByZXN1bHRzLCBzZXR0aW5ncywgc2h1ZmZsZSwgdGFyZ2V0LCB0ZXh0Q2hhcmFjdGVycywgdGV4dExlbmd0aCwgd3JhcDtcbiAgICAgIGRlZmF1bHRzID0ge1xuICAgICAgICBwcm9iYWJpbGl0eTogMC4yLFxuICAgICAgICBnbGl0Y2hlczogJy18L1xcXFwnLFxuICAgICAgICBibGFuazogJycsXG4gICAgICAgIGR1cmF0aW9uOiB0ZXh0Lmxlbmd0aCAqIDQwLFxuICAgICAgICBlYXNlOiAnZWFzZUluT3V0UXVhZCcsXG4gICAgICAgIGRlbGF5OiAwLjBcbiAgICAgIH07XG4gICAgICAkZWxlbWVudCA9ICQoZWxlbWVudCk7XG4gICAgICBzZXR0aW5ncyA9ICQuZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcbiAgICAgIHNodWZmbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKE1hdGgucmFuZG9tKCkgPCAwLjUpIHtcbiAgICAgICAgICByZXR1cm4gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgICB3cmFwID0gZnVuY3Rpb24odGV4dCwgY2xhc3Nlcykge1xuICAgICAgICByZXR1cm4gXCI8c3BhbiBjbGFzcz1cXFwiXCIgKyBjbGFzc2VzICsgXCJcXFwiPlwiICsgdGV4dCArIFwiPC9zcGFuPlwiO1xuICAgICAgfTtcbiAgICAgIGdsaXRjaFRleHQgPSBzZXR0aW5ncy5nbGl0Y2hlcztcbiAgICAgIGdsaXRjaENoYXJhY3RlcnMgPSBnbGl0Y2hUZXh0LnNwbGl0KCcnKTtcbiAgICAgIGdsaXRjaExlbmd0aCA9IGdsaXRjaENoYXJhY3RlcnMubGVuZ3RoO1xuICAgICAgZ2xpdGNoUHJvYmFiaWxpdHkgPSBzZXR0aW5ncy5wcm9iYWJpbGl0eTtcbiAgICAgIGdsaXRjaGVzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaiwgbGVuLCByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IGdsaXRjaENoYXJhY3RlcnMubGVuZ3RoOyBqIDwgbGVuOyBqKyspIHtcbiAgICAgICAgICBsZXR0ZXIgPSBnbGl0Y2hDaGFyYWN0ZXJzW2pdO1xuICAgICAgICAgIHJlc3VsdHMucHVzaCh3cmFwKGxldHRlciwgJ2dsaXRjaCcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pKCk7XG4gICAgICBnaG9zdFRleHQgPSAkZWxlbWVudC50ZXh0KCk7XG4gICAgICBnaG9zdENoYXJhY3RlcnMgPSBnaG9zdFRleHQuc3BsaXQoJycpO1xuICAgICAgZ2hvc3RMZW5ndGggPSBnaG9zdENoYXJhY3RlcnMubGVuZ3RoO1xuICAgICAgZ2hvc3RzID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaiwgbGVuLCByZXN1bHRzO1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAoaiA9IDAsIGxlbiA9IGdob3N0Q2hhcmFjdGVycy5sZW5ndGg7IGogPCBsZW47IGorKykge1xuICAgICAgICAgIGxldHRlciA9IGdob3N0Q2hhcmFjdGVyc1tqXTtcbiAgICAgICAgICByZXN1bHRzLnB1c2god3JhcChsZXR0ZXIsICdnaG9zdCcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0cztcbiAgICAgIH0pKCk7XG4gICAgICB0ZXh0Q2hhcmFjdGVycyA9IHRleHQuc3BsaXQoJycpO1xuICAgICAgdGV4dExlbmd0aCA9IHRleHRDaGFyYWN0ZXJzLmxlbmd0aDtcbiAgICAgIG9yZGVyID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXN1bHRzID0gW107XG4gICAgICAgIGZvciAodmFyIGogPSAwOyAwIDw9IHRleHRMZW5ndGggPyBqIDwgdGV4dExlbmd0aCA6IGogPiB0ZXh0TGVuZ3RoOyAwIDw9IHRleHRMZW5ndGggPyBqKysgOiBqLS0peyByZXN1bHRzLnB1c2goaik7IH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gICAgICB9KS5hcHBseSh0aGlzKS5zb3J0KHRoaXMuc2h1ZmZsZSk7XG4gICAgICBvdXRwdXQgPSBbXTtcbiAgICAgIGZvciAoaSA9IGsgPSAwLCByZWYgPSB0ZXh0TGVuZ3RoOyAwIDw9IHJlZiA/IGsgPCByZWYgOiBrID4gcmVmOyBpID0gMCA8PSByZWYgPyArK2sgOiAtLWspIHtcbiAgICAgICAgZ2xpdGNoSW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoZ2xpdGNoTGVuZ3RoIC0gMSkpO1xuICAgICAgICBnbGl0Y2hDaGFyYWN0ZXIgPSBnbGl0Y2hlc1tnbGl0Y2hJbmRleF07XG4gICAgICAgIGdob3N0Q2hhcmFjdGVyID0gZ2hvc3RzW2ldIHx8IHNldHRpbmdzLmJsYW5rO1xuICAgICAgICBhZGRHbGl0Y2ggPSBNYXRoLnJhbmRvbSgpIDwgZ2xpdGNoUHJvYmFiaWxpdHk7XG4gICAgICAgIGNoYXJhY3RlciA9IGFkZEdsaXRjaCA/IGdsaXRjaENoYXJhY3RlciA6IGdob3N0Q2hhcmFjdGVyO1xuICAgICAgICBvdXRwdXQucHVzaChjaGFyYWN0ZXIpO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0ge1xuICAgICAgICB2YWx1ZTogMFxuICAgICAgfTtcbiAgICAgIHRhcmdldCA9IHtcbiAgICAgICAgdmFsdWU6IDFcbiAgICAgIH07XG4gICAgICBwYXJhbWV0ZXJzID0ge1xuICAgICAgICBkdXJhdGlvbjogc2V0dGluZ3MuZHVyYXRpb24sXG4gICAgICAgIGVhc2U6IHNldHRpbmdzLmVhc2UsXG4gICAgICAgIHN0ZXA6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciBpbmRleCwgbCwgcHJvZ3Jlc3MsIHJlZjE7XG4gICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLmZsb29yKG9iamVjdC52YWx1ZSAqICh0ZXh0TGVuZ3RoIC0gMSkpO1xuICAgICAgICAgIGZvciAoaSA9IGwgPSAwLCByZWYxID0gcHJvZ3Jlc3M7IDAgPD0gcmVmMSA/IGwgPD0gcmVmMSA6IGwgPj0gcmVmMTsgaSA9IDAgPD0gcmVmMSA/ICsrbCA6IC0tbCkge1xuICAgICAgICAgICAgaW5kZXggPSBvcmRlcltpXTtcbiAgICAgICAgICAgIG91dHB1dFtpbmRleF0gPSB0ZXh0Q2hhcmFjdGVyc1tpbmRleF07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAkZWxlbWVudC5odG1sKG91dHB1dC5qb2luKCcnKSk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gJGVsZW1lbnQuaHRtbCh0ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHJldHVybiAkKG9iamVjdCkuZGVsYXkoc2V0dGluZ3MuZGVsYXkpLmFuaW1hdGUodGFyZ2V0LCBwYXJhbWV0ZXJzKTtcbiAgICB9O1xuICBcbiAgICBhbmltYXRlID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgZGF0YSwgZWxlbWVudCwgaW5kZXgsIGosIGxlbiwgb3B0aW9ucztcbiAgICAgIGZvciAoaW5kZXggPSBqID0gMCwgbGVuID0gTUVTU0FHRVMubGVuZ3RoOyBqIDwgbGVuOyBpbmRleCA9ICsraikge1xuICAgICAgICBkYXRhID0gTUVTU0FHRVNbaW5kZXhdO1xuICAgICAgICBlbGVtZW50ID0gJHBhcmFncmFwaC5nZXQoaW5kZXgpO1xuICAgICAgICBpZihlbGVtZW50KXtcblxuICAgICAgICAgICAgZWxlbWVudC5pbm5lclRleHQgPSAnJztcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7XG4gICAgICAgICAgICAgICAgZGVsYXk6IGRhdGEuZGVsYXlcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBzY3JhbWJsZShlbGVtZW50LCBkYXRhLnRleHQsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgXG4gICAgaW5pdGlhbGlzZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIGluZGV4LCBqLCBsZW4sIHRleHQ7XG4gICAgICAkYW5pbWF0ZS5jbGljayhhbmltYXRlKTtcbiAgICAgIGZvciAoaW5kZXggPSBqID0gMCwgbGVuID0gTUVTU0FHRVMubGVuZ3RoOyBqIDwgbGVuOyBpbmRleCA9ICsraikge1xuICAgICAgICB0ZXh0ID0gTUVTU0FHRVNbaW5kZXhdO1xuICAgICAgICAkbWVzc2FnZS5hcHBlbmQoXCI8cD5cIik7XG4gICAgICB9XG4gICAgICAkcGFyYWdyYXBoID0gJGNvbnRhaW5lci5maW5kKFwicFwiKTtcbiAgICAgIGFuaW1hdGUoKTtcbiAgICB9O1xuICAgICAgLy8gJChcIiNvdXItYXJ0LWJ0blwiKS5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZygnc2Rmc2RmJylcbiAgICAvLyB9KTtcblxuICAgIC8vIG91ckFydEJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGUgPT4ge1xuICAgIC8vIH0pXG4gICAgaW5pdGlhbGlzZSgpO1xuICBcbiAgfSkuY2FsbCh0aGlzKTsiXSwibWFwcGluZ3MiOiJBQUFBLENBQUMsWUFBVztFQUNSLElBQUlBLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxRQUFRLEVBQUVDLFVBQVUsRUFBRUMsUUFBUSxFQUFFQyxPQUFPLEVBQUVDLFVBQVUsRUFBRUMsUUFBUTtFQUV2RkgsUUFBUSxHQUFHLEVBQUU7RUFFYkEsUUFBUSxDQUFDSSxJQUFJLENBQUM7SUFDWkMsS0FBSyxFQUFFLENBQUM7SUFDUkMsSUFBSSxFQUFFO0VBQ1IsQ0FBQyxDQUFDO0VBRUZOLFFBQVEsQ0FBQ0ksSUFBSSxDQUFDO0lBQ1pDLEtBQUssRUFBRSxJQUFJO0lBQ1hD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\n//# sourceURL=webpack-internal:///./resources/js/text-animation.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./resources/js/text-animation.js"]();
/******/ 	
/******/ })()
;